plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'info.solidsoft.pitest' version '1.15.0'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'com.github.spotbugs' version '6.0.18'
}

pitest {
    junit5PluginVersion = '1.2.0'
    targetClasses = ['ro.eduardismund.flightmgmt.*']
    excludedClasses = ['ro.eduardismund.flightmgmt.app.App']
    targetTests = ['ro.eduardismund.flightmgmt.*']
    mutationThreshold = 100
    outputFormats = ['HTML']
    timestampedReports = false
}

group = 'ro.eduardismund'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

application {
    mainClass = 'ro.eduardismund.flightmgmt.app.App'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'ro.eduardismund.flightmgmt.app.App'
        )
    }
}

configurations {
    testCompileOnly.extendsFrom compileOnly
    testAnnotationProcessor.extendsFrom annotationProcessor
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.34'
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'
    implementation 'com.microsoft.sqlserver:mssql-jdbc:12.8.1.jre11'

}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

checkstyle {
    toolVersion = '10.18.2'
}

pmd {
    toolVersion = '7.6.0'
    ignoreFailures = true
}

def spotbugsReportSetup(it, qualifier) {
    it.reports.create('html') {
        required = true
        outputLocation = project.layout.buildDirectory.file(
                "/reports/sportbugs/spotbugs-${qualifier}.html")
    }
}

spotbugsReportSetup(tasks.spotbugsMain, 'main')
spotbugsReportSetup(tasks.spotbugsTest, 'test')

spotless {
    java {
        palantirJavaFormat('2.50.0')
        removeUnusedImports()
        indentWithSpaces(4)
    }
}

def configureClassDirectories(task) {
    task.classDirectories.setFrom(
            files(task.classDirectories.files.collect {
                fileTree(dir: it, exclude: [
//                        '**/ro/eduardismund/flightmgmt/cli/**', // Exclude cli directory
                          '**/ro/eduardismund/flightmgmt/app/App.class'  // Exclude app directory
                ])
            })
    )
}

jacoco {
    toolVersion = '0.8.12'
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        configureClassDirectories(jacocoTestReport)
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 1.000
            }
        }
    }
    afterEvaluate {
        configureClassDirectories(jacocoTestCoverageVerification)
    }
}

check.dependsOn(jacocoTestCoverageVerification)
